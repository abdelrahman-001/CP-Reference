const int N = 1e6 + 5;
int t , n , q , p[N] , sz[N] , lvl[N];
vector<int> g[N];
int dfs(int node , int par) {
	lvl[node] = lvl[par] + 1;
	p[node] = par , sz[node] = 1;
	for(auto &i : g[node])
		if(i != par)
			sz[node] += dfs(i , node);
	return sz[node];
}
int chainID , ind , head[N] , node_chain[N] , pos[N];
void HLD(int node , int par) {
    if(head[chainID] == -1)
        head[chainID] = node;
    node_chain[node] = chainID;
    pos[node] = ind++;
    int heavy = -1 , mx = 0;
    for(auto &i : g[node])
        if(i != par && sz[i] > mx)
            mx = sz[i] , heavy = i;
    if(heavy != -1)
        HLD(heavy , node);
    for(auto &i : g[node])
        if(i != par && i != heavy)
            chainID++ , HLD(i , node);
}
ll seg[4 * N] , lazy[4 * N];
void prop(int node , int s , int e) {
    if(lazy[node]) {
        seg[node] = lazy[node];
        if(s != e) {
            lazy[node << 1] = lazy[node];
            lazy[node << 1 | 1] = lazy[node];
        }
        lazy[node] = 0;
    }
}
ll query_sum(int node , int s , int e , int l , int r , int val) {
    prop(node , s , e);
    if(s > r || e < l)
        return 0;
    if(l <= s && e <= r)
        return (seg[node] == val ? e - s + 1 : 0);
    int mid = s + e >> 1;
    return query_sum(node << 1 , s , mid , l , r , val) + query_sum(node << 1 | 1 , mid + 1 , e , l , r , val);
}
ll query(int u , int v , int val) {
    ll ans = 0;
    while(u != v) {
        if(lvl[head[node_chain[u]]] < lvl[head[node_chain[v]]])
            swap(u , v);
        int u_chain = node_chain[u] , v_chain = node_chain[v];
        if(u_chain == v_chain) {
            if(pos[u] > pos[v])
                swap(u , v);
            ans += query_sum(1 , 0 , n - 1 , pos[u] + 1 , pos[v] , val);
            break;
        }
        ans += query_sum(1 , 0 , n - 1 , pos[head[u_chain]] , pos[u] , val);
        u = p[head[u_chain]];
    }
    return ans;
}
void update(int node , int s , int e , int l , int r , int val) {
    prop(node , s , e);
    if(s > r || e < l)
        return;
    if(l <= s && e <= r) {
        lazy[node] = val;
        prop(node , s , e);
        return;
    }
    int mid = s + e >> 1;
    update(node << 1 , s , mid , l , r , val);
    update(node << 1 | 1 , mid + 1 , e , l , r , val);
    seg[node] = ((seg[node << 1] == seg[node << 1 | 1]) ? seg[node << 1] : 0);
}
void change(int u , int v , int val) {
    while(u != v) {
        if(lvl[head[node_chain[u]]] < lvl[head[node_chain[v]]])
            swap(u , v);
        int u_chain = node_chain[u] , v_chain = node_chain[v];
        if(u_chain == v_chain) {
            if(pos[u] > pos[v])
                swap(u , v);
            update(1 , 0 , n - 1 , pos[u] + 1 , pos[v] , val);
            break;
        }
        update(1 , 0 , n - 1 , pos[head[u_chain]] , pos[u] , val);
        u = p[head[u_chain]];
    }
}
ll cnt_total(int u , int v) {
    ll cnt = 0;
    while(u != v) {
        if(lvl[head[node_chain[u]]] < lvl[head[node_chain[v]]])
            swap(u , v);
        int u_chain = node_chain[u] , v_chain = node_chain[v];
        if(u_chain == v_chain) {
            if(pos[u] > pos[v])
                swap(u , v);
            cnt += pos[v] - pos[u];
            break;
        }
        cnt += pos[u] - pos[head[u_chain]] + 1;
        u = p[head[u_chain]];
    }
    return cnt;
}
