int sp[N][M][N][M] , lg[N];
void pre() {
    lg[1] = 0;
    for(int i = 2;i < N;i++)
        lg[i] = lg[i / 2] + 1;
    for(int i = 0;i < n;i++) {
        for(int j = 0;j < m;j++)
            sp[i][0][j][0] = h[i][j];
        for(int j = 1;j <= lg[m];j++)
            for(int k = 0;k + (1 << (j - 1)) < m;k++)
                sp[i][0][k][j] = min(sp[i][0][k][j - 1] , sp[i][0][k + (1 << (j - 1))][j - 1]);
    }
    for(int i = 1;i <= lg[n];i++)
        for(int j = 0;j < n;j++)
            for(int k = 0;k <= lg[m];k++)
                for(int p = 0;p < m;p++)
                    sp[i][j][k][p] = min(sp[i - 1][j][k][p] , sp[i - 1][j + (1 << (i - 1))][k][p]);
}
int get(int r1 , int c1 , int r2 , int c2) {
    int lg1 = lg[r2 - r1 + 1];
    int lg2 = lg[c2 - c1 + 1];
    int ans1 = min(sp[r1][lg1][c1][lg2] , sp[r1][lg1][c2 + 1 - (1 << lg2)][lg2]);
    int ans2 = min(sp[r2 + 1 - (1 << lg1)][lg1][c1][lg2] , sp[r2 + 1 - (1 << lg1)][lg1][c2 + 1 - (1 << lg2)][lg2]);
    return min(ans1 , ans2);
}
