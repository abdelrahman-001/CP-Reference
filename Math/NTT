#pragma GCC optimize("O3")
#pragma GCC optimize ("unroll-loops")
#pragma GCC target("avx,avx2,fma")

#include <bits/stdc++.h>
using namespace std;

// #define ll long long
#define ld long double

const int lg = 18;


#define rep(i, a, b) for (int i = a; i < b; ++i)
#define all(x) x.begin(), x.end()
#define sz(x) (int) x.size()
typedef long long ll;
typedef pair<ll, int> pii;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vi vm;
typedef vector<vm> Mat;



typedef complex<double> C;
typedef vector<double> vd;
void fft(vector<C>& a) {
    int n = sz(a), L = 31 - __builtin_clz(n);
    static vector<complex<long double>> R(2, 1);
    static vector<C> rt(2, 1);  // (^ 10% faster if double)
    for (static int k = 2; k < n; k *= 2) {
        R.resize(n); rt.resize(n);
        auto x = polar(1.0L, acos(-1.0L) / k);
        rep(i,k,2*k) rt[i] = R[i] = i&1 ? R[i/2] * x : R[i/2];
    }
    vi rev(n);
    rep(i,0,n) rev[i] = (rev[i / 2] | (i & 1) << L) / 2;
    rep(i,0,n) if (i < rev[i]) swap(a[i], a[rev[i]]);
    for (int k = 1; k < n; k *= 2)
        for (int i = 0; i < n; i += 2 * k) rep(j,0,k) {
                // C z = rt[j+k] * a[i+j+k]; // (25% faster if hand-rolled)  /// include-line
                auto x = (double *)&rt[j+k], y = (double *)&a[i+j+k];        /// exclude-line
                C z(x[0]*y[0] - x[1]*y[1], x[0]*y[1] + x[1]*y[0]);           /// exclude-line
                a[i + j + k] = a[i + j] - z;
                a[i + j] += z;
            }
}
vd conv(const vd& a, const vd& b) {
    if (a.empty() || b.empty()) return {};
    vd res(sz(a) + sz(b) - 1);
    int L = 32 - __builtin_clz(sz(res)), n = 1 << L;
    vector<C> in(n), out(n);
    copy(all(a), begin(in));
    rep(i,0,sz(b)) in[i].imag(b[i]);
    fft(in);
    for (C& x : in) x *= x;
    rep(i,0,n) out[i] = in[-i & (n - 1)] - conj(in[i]);
    fft(out);
    rep(i,0,sz(res)) res[i] = imag(out[i]) / (4 * n);
    return res;
}
const int N = 1<<16;
template<int M> vl convMod(const vl &a, const vl &b) {
    if (a.empty() || b.empty()) return {};
    vl res(min(N, sz(a) + sz(b) - 1));
    int B=32-__builtin_clz(sz(res)), n=1<<B, cut=int(sqrt(M));
    vector<C> L(n), R(n), outs(n), outl(n);
    rep(i,0,sz(a)) L[i] = C((int)a[i] / cut, (int)a[i] % cut);
    rep(i,0,sz(b)) R[i] = C((int)b[i] / cut, (int)b[i] % cut);
    fft(L), fft(R);
    rep(i,0,n) {
        int j = -i & (n - 1);
        outl[j] = (L[i] + conj(L[j])) * R[i] / (2.0 * n);
        outs[j] = (L[i] - conj(L[j])) * R[i] / (2.0 * n) / 1i;
    }
    fft(outl), fft(outs);
    rep(i,0,sz(res)) {
        ll av = (ll)(real(outl[i])+.5), cv = (ll)(imag(outs[i])+.5);
        ll bv = (ll)(imag(outl[i])+.5) + (ll)(real(outs[i])+.5);
        res[i] = ((av % M * cut + bv) % M * cut + cv) % M;
    }
    return res;
}



vector<ll> solve(vector<ll> v, int n) {
    vector<ll> res({1});
    for(;n;n>>=1,v=convMod<997>(v,v))
        if(n&1)res = convMod<997>(res, v);
    return res;
}


int main() {
//    ios_base::sync_with_stdio(0);
//    cin.tie(0);


    int tt;
    cin >> tt;
    while(tt--) {
        int n;
        cin >> n;
        vector<ll> f(50001, 0);
        for(int i = 0; i < n; i++) {
            int x, y;
            scanf("%d.%d", &x, &y);
            x = x * 100 + y;
            f[x]++;
        }

        int k;
        cin >> k;
        auto res = solve(f, k);

        // for(int i = 0; i <= 20; i++) cout << i << ' ' << res[i] << '\n';
        int q;
        cin >> q;
        while(q--) {
            int x, y;
            scanf("%d.%d", &x, &y);
            x = x * 100 + y;
            cout << res[x] << '\n';
        }
        cout << '\n';
    }

    return 0;
}

//problem: https://codeforces.com/gym/102318/problem/K
