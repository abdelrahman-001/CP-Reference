mt19937_64 mrand(chrono::steady_clock::now().time_since_epoch().count());
struct Node {
    ll key;
    int pri = mrand(), sz = 1;
    ll lz = 0;
    bool rev = false;
    int idx;
    array<Node*, 2> c = {NULL, NULL};
    Node(ll key, int idx) : key(key), idx(idx) {}
};
int getsz(Node* t){
    return t ? t->sz : 0;
}
Node* calc(Node* t) {
    t->sz = 1 + getsz(t->c[0]) + getsz(t->c[1]);
    return t;
}
void prop(Node* cur) {
    if(!cur || !cur->lz || !cur->rev) // rev or lz
        return;
    cur->key += cur->lz;
    //if rev
    swap(cur->c[0], cur->c[1]);
    //if rev
    if(cur->c[0])
        cur->c[0]->rev ^= 1;
    if(cur->c[1])
        cur->c[1]->rev ^= 1;
    // if lz
    if(cur->c[0])
        cur->c[0]->lz += cur->lz;
    if(cur->c[1])
        cur->c[1]->lz += cur->lz;
    cur->rev = false;
    cur->lz = 0;
}
array<Node*, 2> split(Node* t, int k) {
    prop(t);
    if(!t)
        return {t, t};
    if(getsz(t->c[0]) >= k) {   ///answer is in left node
        auto ret = split(t->c[0], k);
        t->c[0] = ret[1];
        return {ret[0], calc(t)};
    } else {  ///k > t->c[0]
        auto ret = split(t->c[1], k - 1 - getsz(t->c[0]));
        t->c[1] = ret[0];
        return {calc(t), ret[1]};
    }
}
Node* merge(Node* u, Node* v) {
    prop(u);
    prop(v);
    if(!u || !v)
        return u ? u : v;
    if(u->pri>v->pri) {
        u->c[1] = merge(u->c[1], v);
        return calc(u);
    } else {
        v->c[0] = merge(u, v->c[0]);
        return calc(v);
    }
}
int cnt(Node* cur, ll x) {
    prop(cur);
    if(!cur)
        return 0;
    if(cur->key <= x)
        return getsz(cur->c[0]) + 1 + cnt(cur->c[1], x);
    return cnt(cur->c[0], x);
}
Node* ins(Node* root, ll val, int idx, int pos) {
    auto splitted = split(root, pos);
    root = merge(splitted[0], new Node(val, idx));
    return merge(root, splitted[1]);
}
void Rev(Node *&root, int l, int r) {
    //0-based
    auto t1 = split(root, r + 1);
    auto t2 = split(t1[0], l);
    t2[1]->rev ^= 1;
    t1[0] = merge(t2[0], t2[1]);
    root = merge(t1[0], t1[1]);
}
//Node *root = NULL
