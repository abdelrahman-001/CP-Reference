void count_sort(vector<int> &p, vector<int> &c) {
    int n = p.size();
    vector<int> cnt(n);
    for(auto x : c)
        cnt[x]++;
    vector<int> p_new(n), pos(n);
    for(int i = 1;i < n;i++)
        pos[i] = pos[i - 1] + cnt[i - 1];
    for(auto x : p) {
        int i = c[x];
        p_new[pos[i]] = x;
        pos[i]++;
    }
    p = p_new;
}
void build_suffix_array(string s, vector<int> &p, vector<int> &c, vector<int> &lcp) {
    s += " ";
    int n = s.size();
    p = vector<int>(n);
    c = vector<int>(n);
    vector<pair<char, int>> a(n);
    for(int i = 0;i < n;i++)
        a[i] = {s[i], i};
    sort(a.begin(), a.end());
    for(int i = 0;i < n;i++)
        p[i] = a[i].second;
    c[p[0]] = 0;
    for(int i = 1;i < n;i++)
        c[p[i]] = c[p[i - 1]] + (a[i].first != a[i - 1].first);
    int k = 0;
    while((1 << k) < n) {
        for(int i = 0;i < n;i++)
            p[i] = (p[i] - (1 << k) + n) % n;
        count_sort(p, c);
        vector<int> c_new(n);
        c_new[p[0]] = 0;
        for(int i = 1;i < n;i++) {
            pair<int, int> prev = {c[p[i - 1]], c[(p[i - 1] + (1 << k)) % n]};
            pair<int, int> now = {c[p[i]], c[(p[i] + (1 << k)) % n]};
            c_new[p[i]] = c_new[p[i - 1]] + (now != prev);
        }
        c = c_new;
        k++;
    }
    lcp = vector<int>(n);
    k = 0;
    for(int i = 0;i < n - 1;i++) {
        int pi = c[i];
        int j = p[pi - 1];
        while(s[i + k] == s[j + k])
            k++;
        lcp[pi] = k;
        k = max(k - 1, 0);
    }
}
int lg[N], sp[N][M];
string s;
vector<int> suf, c, lcp;
void build_sparse() {
    lg[1] = 0;
    for(int i = 2;i <= lcp.size();i++)
        lg[i] = lg[i / 2] + 1;
    for(int i = 0;i < lcp.size();i++)
        sp[i][0] = lcp[i];
    for(int i = 1;i < M;i++) {
        for(int j = 0;j + (1 << i) <= lcp.size();j++) {
            sp[j][i] = min(sp[j][i - 1], sp[j + (1 << (i - 1))][i - 1]);
        }
    }
}
int query(int l, int r) {
    int j = lg[r - l + 1];
    return min(sp[l][j], sp[r - (1 << j) + 1][j]);
}
